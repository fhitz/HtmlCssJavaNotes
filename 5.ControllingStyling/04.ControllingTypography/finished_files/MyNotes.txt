Instructions or explanations:

body {		
	width: 70%;	
	margin: 0 auto;
	font: 100% Arial, Helvetica, sans-serif;
}
	width: 
		So if I resize the browser, it's always going to stay right at 70%, which is nice. 

	margin: 
		When we set a margin, we set margins all the way around the sides of an element. Top, right, bottom, and left. So for this margin, we're saying 0 for the first value, which gives us top and bottom, and then auto for left and right. So you just kind of have to know that shorthand syntax. So auto for left and right says hey, the width is 70%, whatever's leftover, put half of that on the left, half of that on the right, then you get a centered element. So that's exactly what's going on there.


h1 {
	font-family: Georgia, "Times New Roman", Times, serif;  
	font-size: 2em;
	font-weight: normal;
	font-style: italic;
	margin: 1em 0 .4em;
}


	font-family:
		Now Georgia is what we call a system font, meaning it's installed on almost every computer out there when it ships. That way, I know that the end user that's looking at this page is probably going to have that font.

		You see, when we deal with HTML and CSS, we can't install a font for somebody. So basically, we have to rely on the font that's on the client machines to display within the page. Now recently, with the advent of web fonts and services like Typekit, that's changed. But for the most part, unless you're going to be using a service like Google Fonts, or Adobe's Edge Fonts or Typekit. You're probably still going to need to use these types of system fonts. All right, now, one of the things that came in to play as system fonts were being used is the fact that maybe somebody doesn't have Georgia installed, what happens then? Well, if you don't specify what we call a fallback what happens is the default font for that user agent displays.

		And Georgia is a serif font, meaning it looks more like Times New Roman, it has serifs on the end of it. What if the default font for that user agent was a Sans Serif Font? It would look weird and unintended. So, you can describe fallback fonts. In this case, in quotation marks, I'm going to do "Times New Roman". The quotation marks are necessary because this font has more than one name. If it's just one name, you don't need the quotation marks. But the quotation marks group this font together in one name.

		So, basically what we're saying here is, if you don't have Georgia, give me Times New Roman. And then finally, I'm going to do another cursor and then I'm just going to type in serif. And those are your sort of fallback families. I'm basically saying that, hey, in case you don't have Georgia or Times New Roman, just give me whatever serif you have available. And that way at least I get the style of font that I'm looking for.

	font-size:
		I'm going to change the font-size to 2ems. Now font-size of course is how big this is, and I'm doing 2 E-M which stands for em.

		Now, you could do pixels here if you want, there's nothing wrong with that. You can do 32 pixels. But 2ems is a little bit more flexible. This is what we call a relative unit of measurement. What this is doing, is I'm basically saying to the user agent, hey, whatever your default font-size is, give me twice that. So two times what your default is. This is very handy for the world we live in now where we have a lot of different devices. So if somebody is on the phone, 16 pixel text actually looks pretty big, whereas on a desktop screen, 16 pixels is pretty small.

		And that way, I get to size this text relative to the device somebody's reading it on, and it's a nice way to do things.

	font-weight:
	font-style:
		 Now, you can see here, we've done font family, font size, font weight, font style. There are a lot of different properties.

p {
	line-height: 1.6;rft
	text-align: justify;
	width: 60%;
	margin: 0;
	margin-bottom: 1em;
}
	text-align:justify;
		 that is going to set how the edge of the paragraph should be aligned. So left align, right align, centered. In this case I'm doing justify.
	margin: 0;
	margin-bottom: 1em;
		  So what I'm doing basically is setting zero all the way around and then just 1em for the bottom.


What if?:
	Now one last thing. What if we wanted all of our text in the page to be Arial, Helvetica, and Sans Serif except for the heading one, and we wanted that to be Georgia? Well now, using the strategy that we've got here, I would have to set that on all those other elements individually. So what if we had tables? What if we had lists? What if we had block quotes? I would need to set the same font family property in all of them.	

	I'd rather not do that. I like taking care of things globally. So the last thing we're going to do, is we're going to move this information up to the body so that it's a global style applied to all elements. So up in body, I'm going to do one last rule, and I'm going to do font and just font. So the same way that we can do shorthand notation for things like margins, we can do shorthand notation for fonts. And for fonts I'm going to say 100% and then I'm going to say Arial, Helvetica and then sans-serif.

	And if I was smart, I would have copied it from down here. Now, 100% is essentially saying the same thing as 1em. I'm saying, give me your default font size. So they're almost the same. I'm going to take font family and font size away from paragraph. I'm going to strip it, because it doesn't need it, and now, this font would be applied to everything on the page. However, this shows us another thing about CSS. You'll notice that the h1 is saying I want Georgia in two ends, but body is saying this should be applied to everybody. So now we have a conflict, between our CSS.

	Whenever there's a conflict in your CSS, the closest rule wins. Meaning, the more specific rule wins. In this case, h1 is more specific, a single element. So it overrides its parent, which is body. So if I save this, go back out to my CSS. It doesn't look any different, it's exactly the same, but now we have slightly more efficient styles. So I know we did a lot here, but really those are just some of the basic text formatting options that we have when we're using styles. So at this point, if you're starting to feel a little overwhelmed in terms of CSS, please don't.

	Remember, this is not a CSS course. The main purpose of these exercises is to show you a little bit of what CSS is capable of and to expose you to the syntax, so that you're going to have a head start when you begin learning CSS on your own.
